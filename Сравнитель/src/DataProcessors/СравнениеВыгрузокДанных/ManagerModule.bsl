
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Выполняет сравнение данных. Результат записывается в регистр РезультатыСравненияДанных
// 
// Параметры:
//  СравнениеДанныхСсылка - ДокументСсылка.СравнениеДанных
Процедура СравнитьДанные(СравнениеДанныхСсылка) Экспорт
	НачатьТранзакцию();
	Попытка
		ДокументОбъект = СравнениеДанныхСсылка.ПолучитьОбъект();
		ДокументОбъект.Заблокировать();
		
		БлокировкаДанных = Новый БлокировкаДанных;
		
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ВыгрузкиДанных");
		ЭлементБлокировки.УстановитьЗначение("Документ", СравнениеДанныхСсылка);
		
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.РезультатыСравненийДанных");
		ЭлементБлокировки.УстановитьЗначение("Документ", СравнениеДанныхСсылка);
		
		БлокировкаДанных.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВыгрузкиДанных.База КАК База,
			|	ВыгрузкиДанных.Выгрузка КАК Выгрузка
			|ИЗ
			|	РегистрСведений.СравненияДанных КАК СравненияДанных
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВыгрузкиДанных КАК ВыгрузкиДанных
			|		ПО СравненияДанных.Регистратор = ВыгрузкиДанных.Документ
			|ГДЕ
			|	СравненияДанных.Регистратор = &СравнениеДанных
			|	И СравненияДанных.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДокументаСравнениеДанных.ОжидаетсяСравнение)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ВЫБОР
			|		КОГДА ВыгрузкиДанных.База = ЗНАЧЕНИЕ(Перечисление.НомераБаз.Первая)
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ";
		
		Запрос.УстановитьПараметр("СравнениеДанных", СравнениеДанныхСсылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ТаблицаВыгрузок = РезультатЗапроса.Выгрузить();
		
		Если ТаблицаВыгрузок.Количество() <> 2 Тогда
			ВызватьИсключение НСтр("ru='Передана ссылка на документ, не готовый к сравнению'");
		КонецЕсли;
		
		ТипВыгрузкаXDTO = ФабрикаXDTO.Тип("http://comparator.iryaboff.ru/v1/", "ВыгрузкаДанных");
		ВыгрузкаИзПервойБазы = ОбщегоНазначенияСравнитель.СтрокаВОбъектXDTO(ТаблицаВыгрузок[0].Выгрузка.Получить(), ТипВыгрузкаXDTO);
		ВыгрузкаИзВторойБазы = ОбщегоНазначенияСравнитель.СтрокаВОбъектXDTO(ТаблицаВыгрузок[1].Выгрузка.Получить(), ТипВыгрузкаXDTO);
		
		ДокументОбъект.Статус = Перечисления.СтатусыДокументаСравнениеДанных.ВыполняетсяСравнение;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		ЗначенияПараметровВыгрузки = Новый Структура;
		Для Каждого ЗначениеПараметраXDTO Из ВыгрузкаИзПервойБазы.ЗначенияПараметров Цикл
			ЗначенияПараметровВыгрузки.Вставить(ЗначениеПараметраXDTO.Имя, ЗначениеПараметраXDTO.Значение.Получить());
		КонецЦикла;
		
		НаборЗаписейРезультата = РегистрыСведений.РезультатыСравненийДанных.СоздатьНаборЗаписей();
		НаборЗаписейРезультата.Отбор.Найти("Документ").Установить(СравнениеДанныхСсылка);
		
		ТаблицыВыгрузокПервойБазы = Новый Структура;
		ИменаВыгруженныхТаблиц = Новый Массив;
		
		Для Каждого ТаблицаXDTO Из ВыгрузкаИзПервойБазы.Таблицы Цикл
			ТаблицыВыгрузокПервойБазы.Вставить(ТаблицаXDTO.Имя, ТаблицаXDTO.Данные.Получить());
			ИменаВыгруженныхТаблиц.Добавить(ТаблицаXDTO.Имя);
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТаблицыДанных.Имя КАК Имя,
			|	ТаблицыДанных.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ТаблицыДанных КАК ТаблицыДанных
			|ГДЕ
			|	ТаблицыДанных.Владелец = &Владелец
			|	И ТаблицыДанных.Используется";
		
		Запрос.УстановитьПараметр("Владелец", ДокументОбъект.ПравилоСравненияДанных);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		СсылкиНаТаблицы = РезультатЗапроса.Выгрузить();
		
		Для Каждого ТаблицаВторойБазыXDTO Из ВыгрузкаИзВторойБазы.Таблицы Цикл
			ТаблицаПервойБазы = ТаблицыВыгрузокПервойБазы[ТаблицаВторойБазыXDTO.Имя];
			ТаблицаВторойБазы = ТаблицаВторойБазыXDTO.Данные.Получить();
			
			РезультатСравнения = СравнитьТаблицы(ВыгрузкаИзПервойБазы.ПравилоСравнения, ТаблицаВторойБазыXDTO.Имя
				, ТаблицаПервойБазы, ТаблицаВторойБазы, ЗначенияПараметровВыгрузки);
			//
			
			ЗаписьРезультата = НаборЗаписейРезультата.Добавить();
			ЗаписьРезультата.Документ = СравнениеДанныхСсылка;
			ЗаписьРезультата.Таблица = СсылкиНаТаблицы.Найти(ТаблицаВторойБазыXDTO.Имя, "Имя").Ссылка;
			ЗаписьРезультата.Результат = Новый ХранилищеЗначения(РезультатСравнения, Новый СжатиеДанных(9));
		КонецЦикла;
		
		НаборЗаписейРезультата.Записать();
		
		ДокументОбъект.Статус = Перечисления.СтатусыДокументаСравнениеДанных.СравнениеЗавершено;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ДокументОбъект.Разблокировать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняет сравнение данных двух таблиц
//
// Параметры:
//  ПравилоСравненияДанных - ОбъектXDTO - {http://comparator.iryaboff.ru/v1/}ПравилоСравненияДанных
//  ИмяТаблицы - Строка -
//  ТаблицаПервойБазы - ТаблицаЗначений -
//  ТаблицаВторойБазы - ТаблицаЗначений -
//  ЗначенияПараметров - Структура
// 
// Возвращаемое значение:
//  ТаблицаЗначений
Функция СравнитьТаблицы(ПравилоСравненияДанных, ИмяТаблицы, ТаблицаПервойБазы, ТаблицаВторойБазы, ЗначенияПараметров)
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Соотнесено1", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("Соотнесено2", Новый ОписаниеТипов("Булево"));
	
	ТаблицаXDTO = Неопределено;
	ПоляXDTO = Неопределено;
	
	Для Каждого ТаблицаXDTO Из ПравилоСравненияДанных.ТаблицыДанных Цикл
		Если ТаблицаXDTO.Имя <> ИмяТаблицы Тогда
			Продолжить;
		КонецЕсли;
		
		ПоляXDTO = Новый Структура;
		
		Для Каждого ПолеXDTO Из ТаблицаXDTO.Поля Цикл
			ПоляXDTO.Вставить(ПолеXDTO.Имя, ПолеXDTO);
			
			ОписаниеТиповИсходное = ОписаниеТиповXDTOВОписаниеТипов(ПолеXDTO.ТипЗначенияСравнения);
			ОписаниеТиповСравнения = ОписаниеТиповXDTOВОписаниеТипов(ПолеXDTO.ТипЗначенияСравнения);
			ОписаниеТиповПредставление = Новый ОписаниеТипов("Строка");
			
			Если ПолеXDTO.ВидПоля = "Измерение" Тогда
				Результат.Колонки.Добавить("ИсходноеЗначение_" + ПолеXDTO.Имя, ОписаниеТиповИсходное);
				Результат.Колонки.Добавить("Представление_" + ПолеXDTO.Имя, ОписаниеТиповПредставление);
			ИначеЕсли ПолеXDTO.ВидПоля = "Ресурс" Тогда
				Результат.Колонки.Добавить("ИсходноеЗначение1_" + ПолеXDTO.Имя, ОписаниеТиповИсходное);
				Результат.Колонки.Добавить("ЗначениеСравнения1_" + ПолеXDTO.Имя, ОписаниеТиповСравнения);
				Результат.Колонки.Добавить("Представление1_" + ПолеXDTO.Имя, ОписаниеТиповПредставление);
				
				Результат.Колонки.Добавить("ИсходноеЗначение2_" + ПолеXDTO.Имя, ОписаниеТиповИсходное);
				Результат.Колонки.Добавить("ЗначениеСравнения2_" + ПолеXDTO.Имя, ОписаниеТиповСравнения);
				Результат.Колонки.Добавить("Представление2_" + ПолеXDTO.Имя, ОписаниеТиповПредставление);
				
				Результат.Колонки.Добавить("ЗначенияРавны_" + ПолеXDTO.Имя, Новый ОписаниеТипов("Булево"));
			ИначеЕсли ПолеXDTO.ВидПоля = "Реквизит" Тогда
				Результат.Колонки.Добавить("ИсходноеЗначение1_" + ПолеXDTO.Имя, ОписаниеТиповИсходное);
				Результат.Колонки.Добавить("Представление1_" + ПолеXDTO.Имя, ОписаниеТиповПредставление);
				
				Результат.Колонки.Добавить("ИсходноеЗначение2_" + ПолеXDTO.Имя, ОписаниеТиповИсходное);
				Результат.Колонки.Добавить("Представление2_" + ПолеXDTO.Имя, ОписаниеТиповПредставление);
			КонецЕсли;
		КонецЦикла;
		
		Если ТаблицаXDTO.СпособСоединения = "Левое" Тогда
			//
		Иначе
			ВызватьИсключение "_Рябов: пока работает только левое соединение";
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ОписаниеТиповXDTOВОписаниеТипов(ОписаниеТипаXDTO) Экспорт
	Если ОписаниеТипаXDTO.БазовыйТип = "Число" Тогда
		Знак = ?(ОписаниеТипаXDTO.НеотрицательноеЧисло, ДопустимыйЗнак.Неотрицательный, ДопустимыйЗнак.Любой);
		Квалификатор = Новый КвалификаторыЧисла(ОписаниеТипаXDTO.ДлинаЧисла, ОписаниеТипаXDTO.ТочностьЧисла, Знак);
		Возврат Новый ОписаниеТипов("Число",,, Квалификатор);
	ИначеЕсли ОписаниеТипаXDTO.БазовыйТип = "Строка" Тогда
		ДлинаСтроки = ?(ОписаниеТипаXDTO.СтрокаНеограниченнойДлины, 0, ОписаниеТипаXDTO.ДлинаСтроки);
		Квалификатор = Новый КвалификаторыСтроки(ДлинаСтроки);
		Возврат Новый ОписаниеТипов("Строка",,,, Квалификатор);
	ИначеЕсли ОписаниеТипаXDTO.БазовыйТип = "Дата" Тогда
		Квалификатор = Новый КвалификаторыДаты(?(ОписаниеТипаXDTO.ДатаСВременем, ЧастиДаты.ДатаВремя, ЧастиДаты.Дата));
		Возврат Новый ОписаниеТипов("Дата",,,,, Квалификатор);
	ИначеЕсли ОписаниеТипаXDTO.БазовыйТип = "Булево" Тогда
		Возврат Новый ОписаниеТипов("Булево");
	ИначеЕсли ОписаниеТипаXDTO.БазовыйТип = "ХранилищеЗначения" Тогда
		Возврат Новый ОписаниеТипов("ХранилищеЗначения");
	ИначеЕсли ОписаниеТипаXDTO.БазовыйТип = "УникальныйИдентификатор" Тогда
		Возврат Новый ОписаниеТипов("УникальныйИдентификатор");
	КонецЕсли;
КонецФункции

#КонецОбласти

#КонецЕсли
